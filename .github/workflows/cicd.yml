name: CI/CD for Dockerized Flask App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  dockerbuild:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Build The Docker Image
      run: docker build . --file DockerFile --tag workflow- :$(date +%s)

  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flask
        pip install pytest

    - name: Run tests
      run: pytest
  build-and-publish:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./DockerFile
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/flasktest-app:latest

    - name: Image digest
      run: echo ${{ steps.build-and-publish.outputs.digest }}
  deploy:
    needs: build-and-publish
    runs-on: ubuntu-latest
    steps:
    - name: Deploy to DigitalOcean
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.DO_HOST }}
        username: ${{ secrets.DO_USER }}
        key: ${{ secrets.DO_SSH_PRIVATE_KEY }}
    
    - name: Check SSH Key
      run: |
        echo "Checking SSH Key"
        echo "${{ secrets.DO_SSH_PRIVATE_KEY }}" | wc -l

    - name: Deploy the Flask App
      run: |
        docker pull ${{ secrets.DOCKER_USERNAME }}/flasktest-app:latest

        # Stop and remove any existing container (if necessary)
        if [ $(docker ps -aq -f name=flask_container_v2) ]; then
          docker stop flask_container_v2 || true
          docker rm flask_container_v2 || true
        fi
        # Run the new container on a different port (5051 in this case)
        docker run -d -p 5051:5000 --name flask_container_v2 ${{ secrets.DOCKER_USERNAME }}/flasktest-app:latest

